import pytesseract as tess
tess.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# yes, its truly this simple
def getText(img, timeout = 5, language = None):
    return tess.image_to_string(img, timeout = timeout, lang = language)

# https://www.loc.gov/standards/iso639-2/php/code_list.php
ISO6392_LANG_CODES = {'aar': 'Afar', 'abk': 'Abkhazian', 'ace': 'Achinese', 'ach': 'Acoli', 'ada': 'Adangme', 'ady': 'Adyghe', 'afa': 'Afro-Asiatic', 'afh': 'Afrihili', 'afr': 'Afrikaans', 'ain': 'Ainu', 'aka': 'Akan', 'akk': 'Akkadian', 'alb': 'Albanian', 'sqi': 'Albanian', 'ale': 'Aleut', 'alg': 'Algonquian', 'alt': 'Southern Altai', 'amh': 'Amharic', 'ang': 'Old English', 'anp': 'Angika', 'apa': 'Apache', 'ara': 'Arabic', 'arc': 'Aramaic', 'arg': 'Aragonese', 'arm': 'Armenian', 'hye': 'Armenian', 'arn': 'Mapudungun', 'arp': 'Arapaho', 'art': 'Artificial', 'arw': 'Arawak', 'asm': 'Assamese', 'ast': 'Asturian', 'ath': 'Athapascan', 'aus': 'Australian', 'ava': 'Avaric', 'ave': 'Avestan', 'awa': 'Awadhi', 'aym': 'Aymara', 'aze': 'Azerbaijani', 'bad': 'Banda', 'bai': 'Bamileke', 'bak': 'Bashkir', 'bal': 'Baluchi', 'bam': 'Bambara', 'ban': 'Balinese', 'baq': 'Basque', 'eus': 'Basque', 'bas': 'Basa', 'bat': 'Baltic', 'bej': 'Beja', 'bel': 'Belarusian', 'bem': 'Bemba', 'ben': 'Bengali', 'ber': 'Berber', 'bho': 'Bhojpuri', 'bih': 'Bihari', 'bik': 'Bikol', 'bin': 'Bini', 'bis': 'Bislama', 'bla': 'Siksika', 'bnt': 'Bantu', 'tib': 'Tibetan', 'bod': 'Tibetan', 'bos': 'Bosnian', 'bra': 'Braj', 'bre': 'Breton', 'btk': 'Batak', 'bua': 'Buriat', 'bug': 'Buginese', 'bul': 'Bulgarian', 'bur': 'Burmese', 'mya': 'Burmese', 'byn': 'Blin', 'cad': 'Caddo', 'cai': 'Central American Indian', 'car': 'Galibi Carib', 'cat': 'Catalan', 'cau': 'Caucasian', 'ceb': 'Cebuano', 'cel': 'Celtic', 'cze': 'Czech', 'ces': 'Czech', 'cha': 'Chamorro', 'chb': 'Chibcha', 'che': 'Chechen', 'chg': 'Chagatai', 'chi': 'Chinese', 'zho': 'Chinese', 'chk': 'Chuukese', 'chm': 'Mari', 'chn': 'Chinook jargon', 'cho': 'Choctaw', 'chp': 'Chipewyan', 'chr': 'Cherokee', 'chu': 'Church Slavic', 'chv': 'Chuvash', 'chy': 'Cheyenne', 'cmc': 'Chamic', 'cnr': 'Montenegrin', 'cop': 'Coptic', 'cor': 'Cornish', 'cos': 'Corsican', 'cre': 'Cree', 'crh': 'Crimean Tatar', 'crp': 'Creoles and pidgins', 'csb': 'Kashubian', 'cus': 'Cushitic', 'wel': 'Welsh', 'cym': 'Welsh', 'dak': 'Dakota', 'dan': 'Danish', 'dar': 'Dargwa', 'day': 'Land Dayak', 'del': 'Delaware', 'den': 'Athapascan', 'ger': 'German', 'deu': 'German', 'dgr': 'Dogrib', 'din': 'Dinka', 'div': 'Divehi', 'doi': 'Dogri', 'dra': 'Dravidian', 'dsb': 'Lower Sorbian', 'dua': 'Duala', 'dum': 'Old Dutch', 'dut': 'Dutch', 'nld': 'Dutch', 'dyu': 'Dyula', 'dzo': 'Dzongkha', 'efi': 'Efik', 'egy': 'Ancient Egyptian', 'eka': 'Ekajuk', 'gre': 'Modern Greek', 'ell': 'Modern Greek', 'elx': 'Elamite', 'eng': 'English', 'enm': 'Middle English', 'epo': 'Esperanto', 'est': 'Estonian', 'ewe': 'Ewe', 'ewo': 'Ewondo', 'fan': 'Fang', 'fao': 'Faroese', 'per': 'Persian', 'fas': 'Persian', 'fat': 'Fanti', 'fij': 'Fijian', 'fil': 'Filipino', 'fin': 'Finnish', 'fiu': 'Finno-Ugrian', 'fon': 'Fon', 'fre': 'French', 'fra': 'French', 'frm': 'Middle French', 'fro': 'Old French', 'frr': 'Northern Frisian', 'frs': 'Eastern Frisian', 'fry': 'Western Frisian', 'ful': 'Fulah', 'fur': 'Friulian', 'gaa': 'Ga', 'gay': 'Gayo', 'gba': 'Gbaya', 'gem': 'Germanic', 'geo': 'Georgian', 'kat': 'Georgian', 'gez': 'Geez', 'gil': 'Gilbertese', 'gla': 'Gaelic', 'gle': 'Irish', 'glg': 'Galician', 'glv': 'Manx', 'gmh': 'Middle High German', 'goh': 'Old High German', 'gon': 'Gondi', 'gor': 'Gorontalo', 'got': 'Gothic', 'grb': 'Grebo', 'grc': 'Ancient Greek', 'grn': 'Guarani', 'gsw': 'Swiss German', 'guj': 'Gujarati', 'gwi': "Gwich'in", 'hai': 'Haida', 'hat': 'Haitian', 'hau': 'Hausa', 'haw': 'Hawaiian', 'heb': 'Hebrew', 'her': 'Herero', 'hil': 'Hiligaynon', 'him': 'Himachali', 'hin': 'Hindi', 'hit': 'Hittite', 'hmn': 'Hmong', 'hmo': 'Hiri Motu', 'hrv': 'Croatian', 'hsb': 'Upper Sorbian', 'hun': 'Hungarian', 'hup': 'Hupa', 'iba': 'Iban', 'ibo': 'Igbo', 'ice': 'Icelandic', 'isl': 'Icelandic', 'ido': 'Ido', 'iii': 'Sichuan Yi', 'ijo': 'Ijo', 'iku': 'Inuktitut', 'ile': 'Interlingue', 'ilo': 'Iloko', 'inc': 'Indic', 'ind': 'Indonesian', 'ine': 'Indo-European', 'inh': 'Ingush', 'ipk': 'Inupiaq', 'ira': 'Iranian', 'iro': 'Iroquoian', 'ita': 'Italian', 'jav': 'Javanese', 'jbo': 'Lojban', 'jpn': 'Japanese', 'jpr': 'Judeo-Persian', 'jrb': 'Judeo-Arabic', 'kaa': 'Kara-Kalpak', 'kab': 'Kabyle', 'kac': 'Kachin', 'kal': 'Kalaallisut', 'kam': 'Kamba', 'kan': 'Kannada', 'kar': 'Karen', 'kas': 'Kashmiri', 'kau': 'Kanuri', 'kaw': 'Kawi', 'kaz': 'Kazakh', 'kbd': 'Kabardian', 'kha': 'Khasi', 'khi': 'Khoisan', 'khm': 'Central Khmer', 'kho': 'Khotanese', 'kik': 'Kikuyu', 'kin': 'Kinyarwanda', 'kir': 'Kirghiz', 'kmb': 'Kimbundu', 'kok': 'Konkani', 'kom': 'Komi', 'kon': 'Kongo', 'kor': 'Korean', 'kos': 'Kosraean', 'kpe': 'Kpelle', 'krc': 'Karachay-Balkar', 'krl': 'Karelian', 'kro': 'Kru', 'kru': 'Kurukh', 'kua': 'Kuanyama', 'kum': 'Kumyk', 'kur': 'Kurdish', 'kut': 'Kutenai', 'lad': 'Ladino', 'lah': 'Lahnda', 'lam': 'Lamba', 'lao': 'Lao', 'lat': 'Latin', 'lav': 'Latvian', 'lez': 'Lezghian', 'lim': 'Limburgan', 'lin': 'Lingala', 'lit': 'Lithuanian', 'lol': 'Mongo', 'loz': 'Lozi', 'ltz': 'Luxembourgish', 'lua': 'Luba-Lulua', 'lub': 'Luba-Katanga', 'lug': 'Ganda', 'lui': 'Luiseno', 'lun': 'Lunda', 'luo': 'Luo', 'lus': 'Lushai', 'mac': 'Macedonian', 'mkd': 'Macedonian', 'mad': 'Madurese', 'mag': 'Magahi', 'mah': 'Marshallese', 'mai': 'Maithili', 'mak': 'Makasar', 'mal': 'Malayalam', 'man': 'Mandingo', 'mao': 'Maori', 'mri': 'Maori', 'map': 'Austronesian', 'mar': 'Marathi', 'mas': 'Masai', 'may': 'Malay', 'msa': 'Malay', 'mdf': 'Moksha', 'mdr': 'Mandar', 'men': 'Mende', 'mga': 'Old Irish', 'mic': "Mi'kmaq", 'min': 'Minangkabau', 'mis': 'Uncoded', 'mkh': 'Mon-Khmer', 'mlg': 'Malagasy', 'mlt': 'Maltese', 'mnc': 'Manchu', 'mni': 'Manipuri', 'mno': 'Manobo', 'moh': 'Mohawk', 'mon': 'Mongolian', 'mos': 'Mossi', 'mul': 'Multiple', 'mun': 'Munda', 'mus': 'Creek', 'mwl': 'Mirandese', 'mwr': 'Marwari', 'myn': 'Mayan', 'myv': 'Erzya', 'nah': 'Nahuatl', 'nai': 'North American Indian', 'nap': 'Neapolitan', 'nau': 'Nauru', 'nav': 'Navajo', 'nbl': 'South Ndebele', 'nde': 'North Ndebele', 'ndo': 'Ndonga', 'nds': 'Low German', 'nep': 'Nepali', 'new': 'Nepal Bhasa', 'nia': 'Nias', 'nic': 'Niger-Kordofanian', 'niu': 'Niuean', 'nno': 'Norwegian Nynorsk', 'nob': 'Norwegian BokmÃ¥l', 'nog': 'Nogai', 'non': 'Old Norse ', 'nor': 'Norwegian', 'nqo': "N'Ko", 'nso': 'Pedi', 'nub': 'Nubian', 'nwc': 'Classical Newari', 'nya': 'Chichewa', 'nym': 'Nyamwezi', 'nyn': 'Nyankole', 'nyo': 'Nyoro', 'nzi': 'Nzima', 'oci': 'Occitan', 'oji': 'Ojibwa', 'ori': 'Oriya', 'orm': 'Oromo', 'osa': 'Osage', 'oss': 'Ossetian', 'ota': 'Turkish Ottoman', 'oto': 'Otomian', 'paa': 'Papuan', 'pag': 'Pangasinan', 'pal': 'Pahlavi', 'pam': 'Pampanga', 'pan': 'Panjabi', 'pap': 'Papiamento', 'pau': 'Palauan', 'peo': 'Old Persian', 'phi': 'Philippine', 'phn': 'Phoenician', 'pli': 'Pali', 'pol': 'Polish', 'pon': 'Pohnpeian', 'por': 'Portuguese', 'pra': 'Prakrit', 'pro': 'Old ProvenÃ§al', 'pus': 'Pushto', 'que': 'Quechua', 'raj': 'Rajasthani', 'rap': 'Rapanui', 'rar': 'Rarotongan', 'roa': 'Romance', 'roh': 'Romansh', 'rom': 'Romany', 'rum': 'Romanian', 'ron': 'Romanian', 'run': 'Rundi', 'rup': 'Aromanian', 'rus': 'Russian', 'sad': 'Sandawe', 'sag': 'Sango', 'sah': 'Yakut', 'sai': 'South American Indian', 'sal': 'Salishan', 'sam': 'Samaritan Aramaic', 'san': 'Sanskrit', 'sas': 'Sasak', 'sat': 'Santali', 'scn': 'Sicilian', 'sco': 'Scots', 'sel': 'Selkup', 'sem': 'Semitic', 'sga': 'Old Irish', 'sgn': 'Sign Languages', 'shn': 'Shan', 'sid': 'Sidamo', 'sin': 'Sinhala', 'sio': 'Siouan', 'sit': 'Sino-Tibetan', 'sla': 'Slavic', 'slo': 'Slovak', 'slk': 'Slovak', 'slv': 'Slovenian', 'sma': 'Southern Sami', 'sme': 'Northern Sami', 'smi': 'Sami', 'smj': 'Lule Sami', 'smn': 'Inari Sami', 'smo': 'Samoan', 'sms': 'Skolt Sami', 'sna': 'Shona', 'snd': 'Sindhi', 'snk': 'Soninke', 'sog': 'Sogdian', 'som': 'Somali', 'son': 'Songhai', 'sot': 'Southern Sotho ', 'spa': 'Spanish', 'srd': 'Sardinian', 'srn': 'Sranan Tongo', 'srp': 'Serbian', 'srr': 'Serer', 'ssa': 'Nilo-Saharan', 'ssw': 'Swati', 'suk': 'Sukuma', 'sun': 'Sundanese', 'sus': 'Susu', 'sux': 'Sumerian', 'swa': 'Swahili', 'swe': 'Swedish', 'syc': 'Classical Syriac', 'syr': 'Syriac', 'tah': 'Tahitian', 'tai': 'Tai', 'tam': 'Tamil', 'tat': 'Tatar', 'tel': 'Telugu', 'tem': 'Timne', 'ter': 'Tereno', 'tet': 'Tetum', 'tgk': 'Tajik', 'tgl': 'Tagalog', 'tha': 'Thai', 'tig': 'Tigre', 'tir': 'Tigrinya', 'tiv': 'Tiv', 'tkl': 'Tokelau', 'tlh': 'Klingon', 'tli': 'Tlingit', 'tmh': 'Tamashek', 'tog': 'Tonga Nyasa', 'ton': 'Tonga Islands', 'tpi': 'Tok Pisin', 'tsi': 'Tsimshian', 'tsn': 'Tswana', 'tso': 'Tsonga', 'tuk': 'Turkmen', 'tum': 'Tumbuka', 'tup': 'Tupi', 'tur': 'Turkish', 'tut': 'Altaic', 'tvl': 'Tuvalu', 'twi': 'Twi', 'tyv': 'Tuvinian', 'udm': 'Udmurt', 'uga': 'Ugaritic', 'uig': 'Uighur', 'ukr': 'Ukrainian', 'umb': 'Umbundu', 'und': 'Undetermined', 'urd': 'Urdu', 'uzb': 'Uzbek', 'vai': 'Vai', 'ven': 'Venda', 'vie': 'Vietnamese', 'vol': 'VolapÃ¼k', 'vot': 'Votic', 'wak': 'Wakashan', 'wal': 'Wolaitta', 'war': 'Waray', 'was': 'Washo', 'wen': 'Sorbian', 'wln': 'Walloon', 'wol': 'Wolof', 'xal': 'Kalmyk', 'xho': 'Xhosa', 'yao': 'Yao', 'yap': 'Yapese', 'yid': 'Yiddish', 'yor': 'Yoruba', 'ypk': 'Yupik', 'zap': 'Zapotec', 'zbl': 'Blissymbols', 'zen': 'Zenaga', 'zgh': 'Standard Moroccan Tamazight', 'zha': 'Zhuang', 'znd': 'Zande', 'zul': 'Zulu', 'zun': 'Zuni', 'zza': 'Zaza'}

def getLanguages():
    import os
    TESSDATA_PREFIX = os.environ.get('TESSDATA_PREFIX')
    assert TESSDATA_PREFIX != None, "You must set your TESSDATA_PREFIX enviroment variable to use a non-default language"
    assert os.path.isdir(TESSDATA_PREFIX), "Invalid TESSDATA_PREFIX enviroment variable"
    
    langs = []
    for f in os.listdir(TESSDATA_PREFIX):
        if f.endswith(".traineddata"):
            code = f.split(".")[0]
            if code in ISO6392_LANG_CODES:
                langs.append((code, ISO6392_LANG_CODES[code]))
            else:
                langs.append((code, code))
    langs.sort(key = lambda x: x[1].lower())
    return langs


if __name__ == "__main__":
    import screenshot
    sct, _ = screenshot.prompt()
    
    cv2.imshow("source", sct)
    print("TEXT: ")
    print(getText(sct, language = "eng"))
    cv2.waitKey(0)
    